#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on 2024

@author: xuelong.an.23@ucl.ac.uk
"""
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.gaussian_process.kernels import Matern, ConstantKernel, DotProduct
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.utils.validation import check_is_fitted
import numpy as np
from sklearn.preprocessing import RobustScaler

from sklearn.kernel_approximation import RBFSampler
from sklearn.base import BaseEstimator, ClassifierMixin
from sklearn.base import TransformerMixin
# from sklearn.neural_network import MLPClassifier
from sklearn.pipeline import make_pipeline
from sklearn.metrics.pairwise import rbf_kernel
from sklearn.preprocessing import StandardScaler
from sklearn.svm import NuSVC




# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         StandardScaler(),
#         LogisticRegression(C=0.03718979441078695, 
#                            penalty='l1', 
#                            solver='liblinear', random_state=42, max_iter=10000, warm_start=True)
#     )

#     return estimator



class CustomThresholdClassifier(BaseEstimator, ClassifierMixin):
    def __init__(self, base_classifier, threshold=0.5):
        self.base_classifier = base_classifier
        self.threshold = threshold

    def fit(self, X, y):
        self.base_classifier.fit(X, y)
        return self

    def predict(self, X):
        return (self.base_classifier.predict_proba(X)[:, 0] >= self.threshold).astype(int)
    def predict_proba(self, X):
        return self.base_classifier.predict_proba(X)

class ROIsFeatureExtractor(BaseEstimator, TransformerMixin):
    """Select only the 284 ROIs features:"""
    def fit(self, X, y):
        return self

    def transform(self, X):
        return X[:, :284]

# 0.16324984449114358
# 0.03718979441078695
# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         # SelectedRoisFeaturesExtractor(),
#         StandardScaler(),
#         CustomThresholdClassifier(LogisticRegression(C=0.03718979441078695, 
#                            penalty='l1', 
#                            solver='liblinear', random_state=42, max_iter=10000), threshold=0.5
#     ))

#     return estimator
    
# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         # SelectedRoisFeaturesExtractor(),
#         StandardScaler(),
#         # RBFSampler(gamma=1, n_components=1024),
#         LogisticRegression(
#                            C = 0.16324984449114358, 
#                            penalty ='l2', 
#                            solver ='saga', random_state=42, max_iter=1000)
#     )

#     return estimator
    
# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         # SelectedRoisFeaturesExtractor(),
#         StandardScaler(),
        
#         CustomThresholdClassifier(
#             VotingClassifier(
#                             estimators=[
#                                 ('lr1', LogisticRegression(C=0.03718979441078695, 
#                                                            penalty='l1', 
#                                                            solver='liblinear')),
#                                 ('lr2', LogisticRegression(C=0.16324984449114358, 
#                                                            penalty='l2', 
#                                                            solver='liblinear')),],
#                             voting='soft'
#                             ), threshold=0.42
#     ))

#     return estimator
    
# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         # SelectedRoisFeaturesExtractor(),
#         StandardScaler(),
#         # RBFSampler(gamma=1, n_components=1024),
#         SVC(
#             C=0.21776603694820984,
#             gamma=3.9229485139656597,
#             kernel='linear',
#             random_state=42, probability=True)
#     )
#     return estimator
    
# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         # ROIsFeatureExtractor(),
#         StandardScaler(),
#         # RBFSampler(gamma=1, n_components=1024),
#         PrecomputedKernel()
#     )
#     return estimator
feature_idx_12 = np.array([    28,     29,     78,    115,    163,    165,    211,    216,
          344,    357,    519,    669,    759,    889,    931,    949,
          986,   1037,   1736,   2036,   2115,   2227,   2228,   2324,
         2449,   2851,   3001,   3212,   3331,   3333,   3611,   3665,
         3698,   3758,   3808,   4084,   4129,   4469,   4699,   4717,
         4866,   4880,   5091,   5156,   5160,   5649,   5688,   5868,
         5950,   6033,   6487,   6672,   6758,   6831,   6956,   7191,
         7208,   7404,   8040,   8118,   8182,   8431,   8576,   8756,
         8810,   8971,   8988,   8993,   9609,  10099,  10103,  10130,
        10487,  10996,  11073,  11104,  11140,  11422,  11506,  11692,
        11981,  11988,  12207,  12211,  12271,  12331,  12447,  12561,
        12747,  12977,  13346,  13393,  13529,  13606,  13648,  13925,
        14027,  14165,  14168,  14269,  14363,  14377,  14485,  14581,
        14680,  14876,  14879,  14906,  14911,  15061,  15067,  15070,
        15230,  15623,  15648,  15697,  15757,  15850,  15854,  15876,
        15946,  16250,  16388,  16782,  16941,  16989,  17237,  17249,
        17286,  17385,  17417,  17472,  17526,  18065,  18096,  18106,
        18416,  18507,  18665,  18816,  18912,  19050,  19193,  19269,
        19275,  19454,  19681,  19777,  19836,  19875,  19893,  20143,
        20394,  20419,  20522,  20599,  20655,  20688,  20762,  20831,
        20866,  20950,  20964,  21011,  21074,  21181,  21212,  21558,
        21672,  21957,  22165,  22763,  22960,  23108,  23332,  23387,
        23501,  23536,  23671,  23705,  23797,  23800,  23959,  24189,
        24245,  24455,  24646,  24739,  24758,  25247,  25328,  25383,
        25403,  25570,  25587,  25945,  26027,  26059,  26172,  26203,
        26233,  26508,  26553,  26633,  26736,  26742,  26832,  26897,
        26930,  27013,  27119,  27122,  27137,  27150,  27195,  27196,
        27290,  27300,  27434,  27657,  27695,  27716,  27795,  27914,
        27989,  28032,  28034,  28071,  28642,  28832,  28993,  29030,
        29319,  29354,  29417,  29425,  29464,  29514,  29549,  29554,
        29690,  30132,  30440,  30559,  30647,  30773,  30875,  30888,
        30997,  31139,  31555,  31809,  32054,  32113,  32121,  32191,
        32321,  32490,  32521,  32633,  32853,  33079,  33231,  33305,
        33611,  33768,  33850,  33862,  33895,  33989,  34276,  34610,
        34700,  34762,  34994,  35110,  35386,  36062,  36190,  36314,
        36333,  36431,  36472,  36956,  36960,  37063,  37173,  37398,
        37483,  37681,  37804,  37845,  37869,  37943,  37952,  37994,
        38266,  38468,  38567,  38619,  38627,  38630,  38739,  38784,
        38941,  39005,  39205,  39286,  39478,  39488,  39693,  39697,
        39724,  39757,  39829,  39944,  39980,  40129,  40261,  40451,
        40534,  40652,  40706,  40941,  41025,  41032,  41299,  41354,
        41453,  41537,  41670,  41714,  41720,  41745,  41837,  41863,
        41912,  41996,  42284,  42599,  42625,  42638,  42727,  42740,
        42779,  42801,  42936,  42938,  42939,  42992,  43139,  43574,
        43584,  43655,  43684,  43793,  43952,  43973,  44022,  44130,
        44236,  44300,  44874,  45136,  45642,  45722,  45858,  45887,
        46111,  46117,  46147,  46197,  46302,  46400,  46706,  46761,
        46964,  47087,  47248,  47562,  47563,  47573,  47647,  47666,
        47762,  48185,  48406,  48492,  48525,  48539,  48705,  48786,
        49379,  49636,  49671,  50176,  50298,  50315,  50368,  50482,
        50591,  50704,  50813,  50815,  50864,  51039,  51251,  51276,
        51495,  51570,  51737,  51754,  51809,  51846,  51973,  51994,
        52156,  52192,  52243,  52292,  52335,  52485,  52732,  53099,
        53423,  53914,  53919,  54068,  54073,  54153,  54279,  54391,
        54449,  54476,  54592,  54725,  54758,  54788,  54883,  54976,
        55053,  55056,  55064,  55251,  55262,  55268,  55280,  55325,
        55496,  55523,  55843,  55922,  55946,  56005,  56082,  56163,
        56289,  56590,  56862,  56905,  56953,  57151,  57165,  57593,
        58022,  58048,  58118,  58237,  58270,  58281,  58350,  58556,
        58609,  58618,  58660,  58770,  58929,  59040,  59297,  59369,
        59406,  59550,  59580,  59625,  59694,  59900,  59944,  59972,
        60026,  60225,  60280,  60745,  60793,  60952,  61311,  61370,
        61505,  61621,  62171,  62265,  62389,  62590,  62684,  62716,
        62756,  62792,  63043,  63128,  63300,  63479,  63500,  63552,
        63703,  63807,  63867,  64283,  64291,  64332,  64394,  64456,
        64635,  65090,  65109,  65235,  65297,  65304,  65358,  65409,
        65504,  65802,  65851,  65928,  66129,  66198,  66271,  66573,
        66958,  67013,  67024,  67025,  67052,  67537,  67578,  67843,
        67857,  67858,  67920,  67923,  67979,  67984,  68116,  68164,
        68424,  68497,  68517,  68561,  68618,  68791,  68901,  68907,
        68962,  69072,  69112,  69367,  69463,  69568,  69569,  69758,
        69858,  70147,  70166,  70193,  70213,  70338,  70426,  70555,
        70999,  71255,  71329,  71774,  72010,  72075,  72136,  72213,
        72295,  72479,  72655,  72681,  72826,  73108,  73582,  73685,
        73716,  73777,  73791,  73926,  74007,  74086,  74330,  74390,
        74776,  74810,  74874,  74902,  74929,  75555,  75604,  75696,
        75861,  76065,  76158,  76196,  76216,  76344,  76384,  76509,
        76628,  76880,  77151,  77264,  77518,  77715,  77773,  77839,
        77865,  78036,  78052,  78203,  78698,  78969,  78992,  79379,
        79457,  79528,  79571,  79578,  79602,  79648,  79652,  79676,
        80092,  80117,  80141,  80213,  80429,  80440,  80668,  80675,
        80748,  80890,  80928,  81559,  81568,  81731,  82051,  82188,
        82342,  82384,  82561,  82578,  82774,  82799,  82883,  83100,
        83290,  83291,  83322,  83374,  83386,  83399,  83511,  83542,
        83671,  83711,  83758,  83839,  83953,  84184,  84207,  84266,
        84427,  84594,  84728,  84908,  85012,  85080,  85177,  85320,
        85411,  86022,  86054,  86280,  86419,  86505,  86514,  86743,
        86830,  87053,  87202,  87534,  87819,  87995,  88168,  88400,
        88755,  88934,  89107,  89147,  89333,  89347,  89729,  89899,
        90012,  90193,  90251,  90747,  90996,  91075,  91152,  91155,
        91388,  91490,  91613,  91732,  91767,  91771,  91848,  91926,
        91964,  92080,  92114,  92536,  92569,  92604,  92893,  93053,
        93069,  93097,  93123,  93150,  93221,  93345,  93660,  94225,
        94618,  94694,  94724,  94913,  95079,  95176,  95226,  95325,
        95333,  95641,  95648,  95658,  95730,  95909,  96025,  96060,
        96106,  96245,  96263,  96274,  96347,  96413,  96473,  96483,
        96599,  96757,  96785,  96966,  97001,  97088,  97249,  97402,
        97778,  97889,  98000,  98048,  98214,  98269,  98291,  98313,
        98357,  98478,  98593,  98659,  98861,  99055,  99108,  99402,
        99448,  99581,  99720,  99808,  99840,  99892,  99950,  99957,
       100136, 100213, 100691, 100723, 100864, 100877, 100898, 100930,
       100970, 100972, 100974, 101267, 101324, 101632, 101706, 101781,
       101814, 101969, 102141, 102156, 102299, 102378, 102826, 103065,
       103078, 103169, 103237, 103422, 103458, 103483, 103543, 103655,
       103701, 103845, 103896, 103998, 103999, 104000, 104048, 104055,
       104097, 104317, 104360, 104461, 104482, 104557, 104592, 104716,
       104738, 104866, 104952, 105020, 105122, 105149, 105166, 105174,
       105231, 105483, 105538, 105576, 106145, 106308, 106573, 106760,
       106999, 107072, 107105, 107217, 107222, 107368, 107911, 107968,
       107977, 108058, 108065, 108119, 108175, 108268, 108351, 108356,
       108412, 108723, 108974, 109090, 109101, 109265, 109304, 109476,
       109651, 109834, 110009, 110021, 110163, 110325, 110506, 110891,
       110970, 111113, 111277, 111284, 111388, 111577, 111591, 111594,
       111618, 111693, 112112, 112141, 112216, 112226, 112270, 112271,
       112277, 112294, 112324, 112728, 112843, 112853, 112867, 112995,
       113055, 113179, 113283, 113998, 114151, 114152, 114160, 114453,
       114589, 115137, 115139, 115591, 115695, 115831, 116163, 116269,
       116368, 116369, 116418, 116507, 116666, 116693, 117025, 117057,
       117309, 117344, 117651, 117783, 117970, 118345, 118386, 118570,
       119016, 119148, 119324, 119543, 119818, 119842, 119885, 120070,
       120105, 120214, 120240, 120251, 120305, 120322, 120440, 120559,
       120609, 120721, 120841, 120878, 120995, 121061, 121143, 121165,
       121472, 121556, 121683, 121717, 121843, 121928, 121989, 122032,
       122139, 122163, 122195, 122199, 122311, 122322, 122377, 122522,
       122691, 122704, 122961, 123031, 123213, 123465, 123480, 123760,
       123806, 123847, 123994, 124038, 124321, 124347, 124405, 124406,
       124408, 124438, 124514, 124606, 124698, 124766, 124935, 125059,
       125124, 125335, 125338, 125557, 125666, 126253, 126260, 126287,
       126366, 127061, 127200, 127519, 127549, 128224, 128374, 128436,
       128634, 128638, 128762, 128854, 128876, 128922, 129309, 129444,
       129786, 130431, 130478, 130536, 130659, 130687, 130850, 131221,
       131232, 131247, 131327, 131328, 131938, 132049, 132385, 132810,
       132888, 132902, 132968, 133057, 133413, 133575, 133753, 133862,
       133909, 134049, 134060, 134071, 134456, 134474, 134595, 134787,
       134807, 135004, 135181, 135227, 135410, 135445, 135815, 135863,
       136001, 136089, 136132, 136238, 136418, 136532, 136952, 137155,
       137184, 137373, 137374, 137479, 137529, 137591, 137643, 137647,
       137920, 137929, 138294, 138337, 138365, 138585, 138639, 139776,
       139791, 139816, 139862, 140427, 140756, 140850, 140890, 141009,
       141123, 141209, 141269, 141520, 141529, 141651, 142010, 142057,
       142143, 142170, 142382, 142472, 142527, 142703, 142761, 142833,
       142903, 142938, 143176, 143326, 143385, 143437, 143808, 143821,
       143894, 143979, 144014, 144046, 144140, 144176, 144196, 144376,
       144388, 144920, 145068, 145237, 145242, 145418, 145487, 145987,
       146061, 146071, 146180, 146587, 146593, 146915, 146957, 146958,
       147066, 147187, 147241, 147379, 147514, 147600, 147674, 147801,
       148032, 148191, 148218, 148238, 148480, 148523, 148568, 148661,
       148685, 148978, 149070, 149119, 149130, 149348, 149481, 149678,
       150195, 150361, 150441, 150531, 150691, 150840, 150933, 150971,
       150988, 151241, 151274, 151322, 151377, 151645, 151729, 151848,
       151880, 152135, 152607, 152810, 152915, 153304, 153678, 153851,
       153933, 153973, 154274, 154323, 154444, 154492, 154851, 154911,
       154949, 155009, 155055, 155056, 155094, 155452, 155461, 155548,
       155730, 155812, 156077, 156144, 156166, 156712, 156749, 156887,
       157007, 157015, 157054, 157097, 157173, 157764, 157925, 158087,
       158370, 158390, 158480, 158488, 158528, 158583, 158778, 159047,
       159128, 159199, 159330, 159424, 159649, 159742, 159860, 160112,
       160164, 160487, 160561, 160608, 160654, 160835, 161114, 161151,
       161208, 161313, 161539, 161661, 161725, 161985, 162053, 162133,
       162242, 162334, 162432, 162537, 162577, 162655, 163251, 163671,
       163682, 163849, 164244, 164712, 164732, 164784, 164939, 165089,
       165213, 165331, 165366, 165582, 165654, 165853, 165888, 165995,
       166264, 166336, 166601, 166978, 167053, 167337, 167709, 167849,
       167862, 167923, 168056, 168102, 168129, 168192, 168329, 168507,
       168581, 168658, 168715, 168747, 168769, 168831, 168842, 168957,
       169013, 169017, 169122, 169196, 169227, 169242, 169444, 169734,
       169784, 169874, 170136, 170168, 170290, 170431, 170583, 170733,
       170794, 170865, 170927, 171076, 171167, 171262, 171355, 171464,
       171499, 171698, 171781, 171847, 172032, 172182, 172200, 172309,
       172318, 172335, 172343, 172469, 172610, 172628, 172752, 172804,
       172978, 173443, 173592, 173608, 173692, 173733, 173736, 173933,
       173955, 173972, 174071, 174274, 174819, 174846, 175007, 175052,
       175140, 175221, 175277, 175345, 175704, 176053, 176060, 176112,
       176306, 176482, 176538, 176593, 176674, 176825, 176956, 177217,
       177233, 177364, 177724, 177834, 177854, 177855, 177878, 177920,
       177934, 177951, 177958, 178013, 178130, 178204, 178237, 178264,
       178571, 178674, 178694, 179160, 179185, 179222, 179343, 179369,
       179422, 179453, 179633, 179703, 179841, 179916, 179943, 179967,
       180047, 180083, 180132, 180180, 180264, 180368, 180390, 180490,
       180500, 180519, 180697, 180699, 180799, 180884, 180976, 181048,
       181518, 181542, 181667, 181821, 181869, 181947, 182092, 182119,
       182175, 182416, 182455, 182512, 182550, 182662, 182669, 182693,
       182697, 182712, 182741, 182747, 182761, 182851, 183312, 183442,
       183587, 183715, 183743, 183750, 183773, 183814, 183858, 183950,
       184408, 184836, 184858, 184946, 184997, 185137, 185189, 185219,
       185479, 185893, 186013, 186248, 186256, 186330, 186417, 186519,
       186554, 186664, 186742, 186900, 187015, 187072, 187301, 187447,
       187560, 187570, 187621, 187682, 187805, 187819, 187898, 187910,
       188258, 188374, 188411, 188524, 188604, 188672, 188719, 188873,
       188993, 189186, 189200, 189222, 189317, 189330, 189392, 189408,
       189596, 189802, 189846, 190014, 190079, 190281, 190322, 190335,
       190362, 190463, 190702, 190887, 191325, 191377, 191394, 191584,
       191633, 191870, 191880, 192053, 192069, 192228, 192358, 192379,
       192410, 192656, 192718, 192770, 192798, 192836, 192946, 192948,
       193246, 193332, 193409, 193855, 193928, 193931, 194046, 194048,
       194155, 194159, 194221, 194607, 194789, 195169, 195214, 195270,
       196187, 196237, 196415, 196443, 196492, 196540, 197240, 197284,
       197333, 197372, 197486, 197677, 197841, 197919, 197993, 198047,
       198222, 198253, 198684, 199109, 199266, 199361, 199398, 199462,
       199618, 199694, 199857, 199861, 199918, 199973, 200067, 200165,
       200168, 200416, 200562, 200736, 201136, 201514, 201587, 201692,
       202153, 202339, 202600, 202685, 203011, 203064, 203277, 203300,
       203314, 203499, 203621, 203657, 203671, 203778, 203953, 204013,
       204026, 204089, 204139, 204162, 204314, 204462, 204675, 204934,
       204994, 205021, 205063, 205081, 205086, 205234, 205532, 205561,
       205908, 205922, 206152, 206167, 206284, 206402, 206474, 206842,
       206941, 207226, 207407, 207584, 207776, 207914, 208102, 208335,
       208354, 208543, 208843, 208907, 209123, 209276, 209733, 209923,
       209961, 209975, 209986, 210058, 210071, 210078, 210079, 210316,
       210343, 210611, 210727, 211220, 211365, 211416, 211824, 212012,
       212093, 212290, 212344, 212396, 212447, 212450, 213343, 213408,
       213508, 213517, 213572, 213597, 213605, 213626, 213653, 213772,
       214272, 214409, 214421, 214499, 214617, 214710, 214731, 215098,
       215125, 215451, 216130, 216165, 216205, 216313, 216578, 216743,
       216803, 216806, 216846, 216847, 216855, 216923, 216956, 217156,
       217284, 217402, 217684, 217745, 218010, 218127, 218164, 218412,
       218434, 218463, 218491, 218613, 218648, 218685, 218953, 219078,
       219260, 219391, 219414, 219560, 219820, 219824, 220118, 220202,
       220501, 220594, 220640, 220692, 220720, 220743, 220851, 220951,
       221284, 221298, 221485, 221662, 221920, 221952, 221960, 222006,
       222244, 222283, 222324, 222536, 222838, 222949, 223034, 223193,
       223196, 223269, 223310, 223596, 223700, 223882, 224210, 224403,
       224450, 224451, 224499, 224500, 224501, 224553, 224557, 224559,
       224588, 224623, 225288, 225476, 225585, 225665, 226075, 226425,
       226582, 226618, 226866, 226955, 227414, 227655, 227663, 227708,
       227865, 228262, 228313, 228409, 228502, 228522, 228570, 228583,
       228679, 228716, 229073, 229098, 229138, 229350, 229353, 229693,
       229827, 229890, 229956, 230519, 230578, 231085, 231237, 231278,
       231337, 231699, 231712, 231831, 232048, 232101, 232208, 232433,
       232457, 232478, 232500, 232598, 232619, 232787, 232918, 232962,
       233015, 233296, 233472, 233513, 233615, 233790, 233910, 233940,
       234098, 234133, 234188, 234411, 234500, 234501, 234596, 234603,
       234848, 235095, 235137, 235160, 235185, 235385, 235391, 235511,
       235569, 235799, 235802, 235909, 235986, 236089, 236092, 236238,
       236329, 236560, 236739, 237118, 237151, 237309, 237462, 237488,
       237500, 237503, 237575, 237820, 237904, 237951, 238010, 238016,
       238068, 238120, 238138, 238647, 238869, 238896, 239104, 239378,
       239397, 239399, 239475, 239599, 239601, 239729, 239770, 239923,
       240083, 240084, 240101, 240228, 240251, 240318, 240708, 240766,
       240862, 241186, 241210, 241532, 241701, 241780, 242080, 242116,
       242212, 242455, 242469, 242782, 242978, 243463, 243492, 243532,
       243616, 243688, 243920, 243954, 244063, 244078, 244169, 244209,
       244223, 244336, 244342, 244394, 244533, 244730, 244850, 244855,
       244940, 244947, 245118, 245251, 245501, 245634, 245768, 245890,
       246113, 246141, 246300, 246357, 246532, 246534, 246637, 246690,
       246723, 246792, 246834, 247208, 247254, 247451, 247646, 247852,
       247942, 247987, 248143, 248321, 248382, 248388, 248457, 248528,
       248596, 248834, 248842, 248903, 248964, 249095, 249180, 249237,
       249320, 249763, 250028, 250604, 250680, 250919, 251088, 251285,
       251498, 251505, 251625, 251631, 251675, 251739, 251811, 251923,
       252146, 252216, 252317, 252340, 252342, 252373, 252567, 252575,
       252576, 252614, 252677, 252696, 252704, 252889, 253316, 253318,
       253420, 253546, 253575, 253625, 253651, 253658, 254074, 254137,
       254151, 254211, 254260, 254285, 254296, 254350, 254434, 254502,
       254620, 254642, 254703, 254742, 254801, 255003, 255123, 255241,
       255279, 255666, 255866, 255930, 256085, 256122, 256245, 256253,
       256353, 256649, 256785, 256941, 256998, 257025, 257048, 257139,
       257282, 257381, 257436, 257495, 257525, 257632, 257772, 257777,
       257872, 257986, 258026, 258217, 258261, 258721, 258792, 258949,
       259092, 259099, 259356, 259661, 259722, 259753, 259803, 259968,
       260069, 260077, 260104, 260154, 260183, 260348, 260407, 260553,
       260655, 260720, 260911, 260912, 260914, 260954, 260972, 260989,
       261005, 261018, 261023, 261087, 261100, 261170, 261185, 261327,
       261374, 261383, 261677, 261692, 261901, 262015, 262210, 262319,
       262458, 262562, 262647, 262685, 262817, 262919, 263198, 263205,
       263244, 263630, 263667, 263821, 263853, 264008, 264044, 264064,
       264110, 264174, 264232, 264477, 264537, 264573, 264852, 265154,
       265226, 265235, 265294, 265295, 265360, 265434, 265486, 265523,
       265578, 265697, 265782, 265783, 265895, 266059, 266130, 266187,
       266268, 266374, 266459, 266483, 266491, 266919, 266959, 267049,
       267126, 267208, 267257, 267309, 267344, 267377, 267585, 267780,
       267952, 268181, 268275, 268299, 268515, 268623, 268686, 268760,
       268950, 268989, 269068, 269159, 269181, 269220, 269409, 269448,
       269510, 269532, 269640, 269788, 269861, 269991, 270066, 270069,
       270135, 270228, 270349, 270350, 270358, 270389, 270447, 270490,
       270806, 270835, 270925, 270931, 270941, 270957, 271104, 271280,
       271307, 271512, 271536, 271738, 271790, 271900, 271939, 271976,
       272053, 272335, 272345, 272379, 272521, 272733, 273018, 273061,
       273275, 273337, 273355, 273400, 273518, 273531, 273651, 273689,
       273805, 273806, 274365, 274602, 274741, 274847, 274877, 275004,
       275054, 275221, 275237, 275437, 275564, 275580, 275760, 275803,
       275842, 276133, 276170, 276252, 276263, 276293, 276377, 276493,
       276677, 276848, 277031, 277085, 277299, 277564, 277579, 277695,
       277748, 277890, 278096, 278265, 278268, 278379, 278535, 278617,
       278737, 278809, 278829, 278842, 278893, 278978, 278991, 279119,
       279236, 279705, 280055, 280125, 280168, 280392, 280415, 280625,
       280631, 280870, 280894, 280959, 281141, 281257, 281277, 281280,
       281353, 281384, 281503, 281578, 281604, 281641, 281857, 281862,
       281895, 281919, 281940, 282163, 282280, 282334, 282426, 282445,
       282513, 282539, 282771, 282783, 283035, 283108, 283198, 283218,
       283452, 283490, 283508, 283611, 283844, 283875, 283939, 284112,
       284248, 284285, 284330, 284455, 284792, 284844, 285082, 285100,
       285204, 285222, 285371, 285454, 285512, 285577, 285687, 285748,
       285902, 285958, 285987, 286043, 286108, 286110, 286243, 286368,
       286374, 286401, 286535, 286638, 286748, 286789, 286881, 286893,
       287058, 287126, 287356, 287617, 287622, 287727, 287767, 288044,
       288140, 288159, 288215, 288223, 288253, 288267, 288293, 288324,
       288437, 288463, 288528, 288609, 288868, 288884, 288946, 288956,
       288995, 289320, 289437, 289800, 289892, 289934, 289965, 290081,
       290109, 290166, 290360, 290369, 290406, 290479, 290557, 290622,
       290668, 290778, 290789, 290875, 291169, 291212, 291259, 291300,
       291421, 291490, 291510, 291760, 291933, 292001, 292025, 292226,
       292307, 292512, 292835, 292864, 293119, 293348, 293385, 293896,
       294275, 294725, 294751, 294794, 295095, 295180, 295283, 295319,
       295388, 295408, 295728, 295927, 295934, 296074, 296078, 296094,
       296236, 296379, 296442, 296563, 296586, 296707, 297064, 297120,
       297167, 297318, 297368, 297535, 297673, 297820, 297822, 298378,
       298534, 298773, 298821, 298882, 298909, 298985, 299118, 299130,
       299212, 300039, 300070, 300186, 300496, 300548, 300643, 300669,
       300748, 300798, 300801, 300907, 300938, 300965, 301073, 301460,
       301489, 301603, 301743, 301799, 301802, 301857, 302043, 302196,
       302197, 302314, 302515, 302788, 302866, 302877, 302880, 303248,
       303299, 303362, 303371, 303723, 303849, 303956, 304053, 304092,
       304112, 304127, 304245, 304578, 304737, 304837, 304950, 304998,
       305014, 305033, 305100, 305231, 305305, 305419, 305478, 305571,
       305586, 305686, 305758, 305759, 305845, 305908, 306164, 306327,
       306352, 306436, 306522, 306772, 306894, 306916, 307131, 307283,
       307608, 307622, 307795, 307889, 307929, 307971, 308116, 308140,
       308512, 308833, 308880, 308924, 309131, 309145, 309148, 309398,
       309404, 309412, 309450, 309457, 309478, 309705, 309775, 309852,
       309875, 310104, 310399, 310418, 310561, 310709, 310712, 310878,
       310927, 311305, 311307, 311327, 311358, 311577, 311630, 311711,
       311913, 312265, 312279, 312286, 312359, 312365, 312490, 312544,
       312577, 312579, 312588, 312626, 312642, 312673, 312678, 312921,
       312942, 312968, 313238, 313392, 313737, 313832, 314102, 314168,
       314397, 314410, 314597, 314677, 314977, 315186, 315242, 315244,
       315269, 315355, 315380, 315449, 315506, 315607, 316105, 316119,
       316205, 316473, 316484, 317210, 317216, 317310, 317659, 317690,
       317899, 318341, 318370, 318529, 318584, 318592, 318594, 318684,
       318685, 319299, 319491, 319585, 319666, 319833, 320009, 320144,
       320218, 320221, 320257, 320411, 320778, 320963, 321045, 321312,
       321344, 321409, 321455, 321470, 321690, 321717, 321847, 321905,
       321951, 322091, 322219, 322271, 322526, 322567, 322700, 322844,
       323080, 323233, 323235, 323452, 323501, 323844, 323854, 323863,
       323866, 324184, 324191, 324354, 324443, 324502, 324530, 324615,
       324672, 324780, 324934, 324951, 325107, 325365, 325377, 325378,
       325516, 325563, 325632, 325651, 325666, 325962, 326666, 326839,
       326878, 326995, 327129, 327270, 327592, 327923, 327963, 328077,
       328181, 328186, 328338, 328454, 328637, 328703, 328792, 328911,
       329068, 329129, 329222, 329297, 329327, 329354, 329359, 329412,
       329514, 329538, 329576, 329597, 329676, 329816, 329931, 329962,
       330029, 330286, 330417, 330462, 330489, 330542, 330869, 330954,
       331058, 331432, 331435])

class PrecomputedKernelLinear(BaseEstimator, ClassifierMixin):
    def __init__(self, gamma=0.016994636371262764, C=0.15246748254295628):
        self.C = C
        self.gamma = gamma
        self.svm = SVC(class_weight="balanced", kernel='precomputed', probability=True, \
                       C=0.001, random_state=1, gamma=0.001)

    def fit(self, X, y):

        # Compute the linear kernel matrix for training data
        self.X_train_ = X  # Store the original training data
        # kernel_matrix = rbf_kernel(X, X)
        kernel_matrix = X.dot(X.T)
        self.svm.fit(kernel_matrix, y)
        self.classes_ = self.svm.classes_
        return self

    def predict(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        # kernel_matrix = rbf_kernel(X, self.X_train_)
        kernel_matrix = X.dot(self.X_train_.T)
        return self.svm.predict(kernel_matrix)

    def predict_proba(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        # kernel_matrix = rbf_kernel(X, self.X_train_)
        kernel_matrix = X.dot(self.X_train_.T)
        # This will only work if `probability=True` was set when initializing the SVM
        return self.svm.predict_proba(kernel_matrix)
    def decision_function(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        # kernel_matrix = rbf_kernel(X, self.X_train_)
        kernel_matrix = X.dot(self.X_train_.T)
        return self.svm.decision_function(kernel_matrix)

class PrecomputedKernelNuSVC(BaseEstimator, ClassifierMixin):
    def __init__(self, gamma=0.25710111426089055, nu=0.5):
     
        self.gamma = gamma
        self.nu = nu
        self.svm = NuSVC(probability=True, kernel='precomputed',\
                      gamma=self.gamma, nu=self.nu, random_state=42)

    def fit(self, X, y):

        # Compute the linear kernel matrix for training data
        self.X_train_ = X  # Store the original training data
        # kernel_matrix = rbf_kernel(X, X)
        kernel_matrix = X.dot(X.T)
        self.svm.fit(kernel_matrix, y)
        self.classes_ = self.svm.classes_
        return self

    def predict(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        # kernel_matrix = rbf_kernel(X, self.X_train_)
        kernel_matrix = X.dot(self.X_train_.T)
        return self.svm.predict(kernel_matrix)

    def predict_proba(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        # kernel_matrix = rbf_kernel(X, self.X_train_)
        kernel_matrix = X.dot(self.X_train_.T)
        # This will only work if `probability=True` was set when initializing the SVM
        return self.svm.predict_proba(kernel_matrix)
    def decision_function(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        # kernel_matrix = rbf_kernel(X, self.X_train_)
        kernel_matrix = X.dot(self.X_train_.T)
        return self.svm.decision_function(kernel_matrix)
    
class PrecomputedKernelRBF(BaseEstimator, ClassifierMixin):
    def __init__(self, C=0.3):
        self.C = C
        self.svm = SVC(class_weight="balanced", kernel='precomputed', probability=True, \
                       C=self.C, random_state=1, gamma='scale')

    def fit(self, X, y):

        # Compute the linear kernel matrix for training data
        self.X_train_ = X  # Store the original training data
        kernel_matrix = rbf_kernel(X, X)
        # kernel_matrix = X.dot(X.T)
        self.svm.fit(kernel_matrix, y)
        self.classes_ = self.svm.classes_
        return self

    def predict(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        kernel_matrix = rbf_kernel(X, self.X_train_)
        # kernel_matrix = X.dot(self.X_train_.T)
        return self.svm.predict(kernel_matrix)

    def predict_proba(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        kernel_matrix = rbf_kernel(X, self.X_train_)
        # kernel_matrix = X.dot(self.X_train_.T)
        # This will only work if `probability=True` was set when initializing the SVM
        return self.svm.predict_proba(kernel_matrix)
    def decision_function(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        kernel_matrix = rbf_kernel(X, self.X_train_)
        # kernel_matrix = X.dot(self.X_train_.T)
        return self.svm.decision_function(kernel_matrix)
    
features_idx_8 = np.array([    26,     27,     61,     99,    172,    186,    187,    188,
          189,    196,    197,    202,    203,    220,    221,    233,
          240,    242,    250,    251,    258,    259,    263,    282,
         5092,   5138,   6849,   6957,   7006,  14379,  14912,  17237,
        17361,  17417,  17460,  17564,  19028,  20263,  20264,  20446,
        20503,  20598,  20642,  20702,  20818,  21010,  23412,  23648,
        23705,  23706,  23752,  23799,  23800,  23844,  23899,  26816,
        26817,  26877,  27001,  27059,  27108,  27195,  27196,  27243,
        27299,  27744,  30235,  30292,  30336,  30578,  30718,  30766,
        30767,  33850,  34976,  35029,  35081,  35082,  35129,  35181,
        35191,  37709,  38118,  38508,  38561,  38838,  38891,  38892,
        38893,  38940,  38941,  38943,  38992,  38993,  38994,  38995,
        39047,  39048,  39049,  39148,  39513,  41671,  42382,  42884,
        42885,  42887,  42935,  42936,  42937,  42938,  42939,  42992,
        42993,  43005,  43139,  46004,  46111,  46112,  46151,  46244,
        46292,  46355,  46964,  46968,  47016,  47017,  47018,  47019,
        47020,  47021,  47071,  47072,  47073,  47074,  47087,  50138,
        50269,  50311,  50479,  50534,  50704,  50705,  50946,  50947,
        51105,  51158,  51159,  51160,  51215,  51216,  51217,  51284,
        55063,  55123,  55287,  55343,  55344,  55400,  55401,  55610,
        58051,  58679,  58828,  59306,  59607,  59665,  59717,  63495,
        67734,  67847,  67857,  67858,  67862,  71274,  71328,  71329,
        71331,  71374,  71423,  71857,  71913,  71977,  76069,  76131,
        76188,  76215,  76383,  76630,  80143,  80191,  80205,  80332,
        80336,  80377,  83085,  83114,  83146,  83147,  83183,  83387,
        84154,  84156,  84254,  84416,  87310,  87311,  87363,  87365,
        87420,  87477,  87478,  87479,  87480,  87481,  87536,  87767,
        87928,  90817,  91438,  91612,  91613,  91672,  91732,  91961,
        93688,  95516,  95731,  95732,  95790,  95793,  95850,  95851,
        96030,  99678,  99679,  99841,  99842,  99891,  99897,  99950,
        99951,  99958, 103797, 103845, 103846, 103885, 103894, 103895,
       103896, 103945, 103946, 103996, 103997, 103998, 103999, 104055,
       104056, 104057, 104058, 104787, 105149, 107920, 107921, 107967,
       107968, 107969, 108006, 108014, 108015, 108016, 108017, 108062,
       108063, 108064, 108065, 108117, 108118, 108119, 108120, 108174,
       108175, 108176, 108177, 112060, 112111, 112112, 112113, 112160,
       112161, 112162, 112163, 112214, 112215, 112216, 112217, 112267,
       112268, 112269, 112270, 112271, 112272, 112324, 112325, 112326,
       112327, 112382, 116126, 116219, 116220, 116267, 116268, 116269,
       116270, 116315, 116316, 116317, 116318, 116367, 116368, 116369,
       116370, 116418, 116419, 116459, 120168, 120169, 120210, 120211,
       120212, 120249, 120250, 120251, 120286, 120287, 120288, 120289,
       120321, 124038, 124070, 124071, 124100, 137064, 137094, 137125,
       137186, 137444, 137485, 137489, 139764, 141628, 141665, 141667,
       141679, 141703, 141742, 141781, 141821, 141909, 141910, 142032,
       145744, 146650, 146926, 146973, 146982, 147036, 151526, 151633,
       151811, 152084, 152085, 152136, 155833, 161415, 165092, 165201,
       165391, 165428, 168087, 168120, 168150, 168221, 168237, 168256,
       168257, 168292, 168293, 168714, 168754, 168756, 168796, 168799,
       168841, 168842, 168843, 168917, 168965, 169328, 172599, 173012,
       173068, 173126, 177557, 177979, 182549, 182597, 182658, 182659,
       182799, 182973, 183536, 183667, 187916, 192985, 193514, 197670,
       197705, 198154, 198935, 205561, 207108, 209637, 213343, 213373,
       216881, 216921, 216922, 216923, 216963, 216964, 216965, 217002,
       217003, 217004, 217005, 220593, 220594, 220595, 220639, 220640,
       220641, 220642, 220689, 220690, 220691, 220692, 220739, 220741,
       220742, 220743, 220788, 220789, 220831, 224401, 224402, 224403,
       224448, 224449, 224450, 224451, 224452, 224498, 224499, 224500,
       224501, 224502, 224554, 224555, 224556, 224612, 228264, 228265,
       228311, 228312, 228313, 228360, 228361, 228409, 228410, 228463,
       228465, 228466, 228526, 229945, 230309, 232102, 232153, 232154,
       232208, 232318, 233435, 235986, 235987, 236037, 236038, 236039,
       236089, 236090, 236091, 236144, 236145, 236146, 239557, 239930,
       239977, 239978, 240028, 240029, 240030, 240082, 240083, 240084,
       240085, 240086, 240139, 240140, 240169, 240170, 240201, 240202,
       240228, 240260, 240261, 240262, 240288, 240319, 240321, 240379,
       240713, 240767, 244047, 244104, 244165, 244225, 244252, 244310,
       244398, 244757, 244805, 244855, 244904, 244947, 244948, 244989,
       245076, 245077, 245588, 247954, 247984, 248448, 248500, 248918,
       248919, 248963, 248964, 248965, 249011, 249012, 249014, 249116,
       249163, 249355, 252266, 252908, 252909, 252957, 252958, 252959,
       253008, 253009, 253010, 253011, 253012, 253155, 253159, 253201,
       253276, 253277, 256837, 256941, 256942, 256943, 256998, 257047,
       257048, 257050, 257052, 257103, 257150, 257161, 257199, 257209,
       257242, 260552, 260742, 260913, 261018, 261023, 261067, 261075,
       261136, 261205, 261250, 264174, 264935, 264997, 265054, 265055,
       265115, 265154, 265226, 265240, 265284, 265295, 265351, 265352,
       269099, 269100, 269170, 269171, 269220, 269221, 269225, 269282,
       269326, 269510, 269511, 269580, 269639, 269640, 269691, 272378,
       273036, 273037, 273086, 273087, 273088, 273399, 273400, 273461,
       273462, 273463, 273529, 273749, 273804, 273805, 273806, 273860,
       273865, 273866, 273925, 273926, 273935, 276788, 277489, 277504,
       277748, 277806, 278026, 278029, 278143, 278196, 278201, 278202,
       278261, 278269, 281254, 281585, 281730, 281803, 281862, 281978,
       282094, 282613, 285212, 285514, 285515, 285516, 286213, 286646,
       286648, 289288, 289356, 289653, 289709, 289980, 290625, 294040,
       294584, 294585, 294635, 294636, 294637, 294640, 297578, 301338,
       301394, 301395, 302199, 303247, 303393, 304560, 305300, 305586,
       305627, 305686, 306783, 308602, 308739, 308837, 308838, 308880,
       308881, 308981, 309148, 309188, 309202, 311440, 311943, 312286,
       312287, 312334, 312335, 312336, 312376, 312536, 312588, 312589,
       312638, 312639, 312838, 313474, 314566, 315187, 315241, 315242,
       315524, 315525, 315580, 315581, 315582, 315629, 315630, 315631,
       315825, 316419, 316458, 316459, 316465, 317713, 318200, 318201,
       318252, 318529, 318530, 318531, 318584, 318585, 318637, 318638,
       318639, 318685, 318841, 318842, 319287, 320564, 320867, 320996,
       321048, 321312, 321363, 321364, 321463, 321640, 321900, 322905,
       323094, 323095, 323478, 323571, 323622, 323866, 324507, 325216,
       326481, 328260, 329453, 329899, 330104, 330941, 330996, 331087,
       331605])

class SelectedFeatureExtractor(BaseEstimator, TransformerMixin):
    """Select 331695 VBM features:"""
    def fit(self, X, y):
        return self
 
    def transform(self, X):
        return X[:, features_idx_8] 

 
# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         SelectedFeatureExtractor(),
#         RobustScaler(),
#         PrecomputedKernel()
#     )
#     return estimator

# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         SelectedFeatureExtractor(),
#         RobustScaler(),
#         PrecomputedKernel(gamma=0.011233621690895234, nu= 0.02324633323298668)
#         # PrecomputedKernel(C=0.01,gamma=0.001)
#     )
#     return estimator

# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         SelectedFeatureExtractor(),
#         RobustScaler(),
#         LogisticRegression(C=0.22430443934958574, 
#                            penalty='l1', 
#                            solver='liblinear', random_state=42, max_iter=10000)
#     )

#     return estimator
    
ensemble_clf_soft = VotingClassifier(
    estimators=[
        ('lr1', PrecomputedKernelLinear()),
        ('lr2', PrecomputedKernelNuSVC()),
        ('lr3', PrecomputedKernelRBF())
    ],
    voting='soft'
)
    
# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         SelectedFeatureExtractor(),
#         RobustScaler(),
#         ensemble_clf_soft
#     )

#     return estimator

def get_estimator():
    """Build your estimator here."""
    kernel = ConstantKernel() * DotProduct() + Matern(length_scale=0.01, nu=2.5)
    estimator = make_pipeline(
        SelectedFeatureExtractor(),
        RobustScaler(),
        GaussianProcessClassifier(random_state=42)
    )

    return estimator

print(get_estimator())

class PrecomputedKernelRBF(BaseEstimator, ClassifierMixin):
    def __init__(self, C=0.3):
        self.C = C
        self.svm = SVC(class_weight="balanced", kernel='precomputed', probability=True, \
                       C=self.C, random_state=1, gamma='scale')
        self.X_train_ = None  # Initialize X_train_ attribute
        self.y_train_ = None  # Initialize y_train_ attribute
        self.y_val_labels = None  # Initialize y_val_labels attribute

    def fit(self, X, y):
        # Save the incoming training data X and the corresponding labels y
        self.X_train_ = X
        self.y_train_ = y
        kernel_matrix = rbf_kernel(X, X)
        self.svm.fit(kernel_matrix, y)
        self.classes_ = self.svm.classes_

        # Obtain y_val_labels during one CV iteration
        skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
        for train_index, val_index in skf.split(X, y):
            self.y_val_labels = y[val_index]
            break  # Only need one iteration to get y_val_labels

        return self

    def predict(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        kernel_matrix = rbf_kernel(X, self.X_train_)
        # Train the model on the validation labels obtained during fit()
        self.svm.fit(kernel_matrix, self.y_val_labels)
        return self.svm.predict(kernel_matrix)

    def predict_proba(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        kernel_matrix = rbf_kernel(X, self.X_train_)
        # Train the model on the validation labels obtained during fit()
        self.svm.fit(kernel_matrix, self.y_val_labels)
        return self.svm.predict_proba(kernel_matrix)

    def decision_function(self, X):
        check_is_fitted(self)
        # Compute the kernel matrix for the test data
        kernel_matrix = rbf_kernel(X, self.X_train_)
        # Train the model on the validation labels obtained during fit()
        self.svm.fit(kernel_matrix, self.y_val_labels)
        return self.svm.decision_function(kernel_matrix)