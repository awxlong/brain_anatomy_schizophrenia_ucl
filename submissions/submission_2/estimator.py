#!/usr/bin/env python3
# -*- coding: utf-8 -*-
 
import numpy as np
from sklearn.base import BaseEstimator
from sklearn.base import TransformerMixin
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import RobustScaler

# Models
from sklearn.svm import SVC

from sklearn.ensemble import VotingClassifier
from sklearn.svm import NuSVC

 
features_idx_HD = [    26,     27,     61,     99,    172,    186,    187,    188,
          189,    196,    197,    202,    203,    220,    221,    233,
          240,    242,    250,    251,    258,    259,    263,    282,
         5092,   5138,   6849,   6957,   7006,  14379,  14912,  17237,
        17361,  17417,  17460,  17564,  19028,  20263,  20264,  20446,
        20503,  20598,  20642,  20702,  20818,  21010,  23412,  23648,
        23705,  23706,  23752,  23799,  23800,  23844,  23899,  26816,
        26817,  26877,  27001,  27059,  27108,  27195,  27196,  27243,
        27299,  27744,  30235,  30292,  30336,  30578,  30718,  30766,
        30767,  33850,  34976,  35029,  35081,  35082,  35129,  35181,
        35191,  37709,  38118,  38508,  38561,  38838,  38891,  38892,
        38893,  38940,  38941,  38943,  38992,  38993,  38994,  38995,
        39047,  39048,  39049,  39148,  39513,  41671,  42382,  42884,
        42885,  42887,  42935,  42936,  42937,  42938,  42939,  42992,
        42993,  43005,  43139,  46004,  46111,  46112,  46151,  46244,
        46292,  46355,  46964,  46968,  47016,  47017,  47018,  47019,
        47020,  47021,  47071,  47072,  47073,  47074,  47087,  50138,
        50269,  50311,  50479,  50534,  50704,  50705,  50946,  50947,
        51105,  51158,  51159,  51160,  51215,  51216,  51217,  51284,
        55063,  55123,  55287,  55343,  55344,  55400,  55401,  55610,
        58051,  58679,  58828,  59306,  59607,  59665,  59717,  63495,
        67734,  67847,  67857,  67858,  67862,  71274,  71328,  71329,
        71331,  71374,  71423,  71857,  71913,  71977,  76069,  76131,
        76188,  76215,  76383,  76630,  80143,  80191,  80205,  80332,
        80336,  80377,  83085,  83114,  83146,  83147,  83183,  83387,
        84154,  84156,  84254,  84416,  87310,  87311,  87363,  87365,
        87420,  87477,  87478,  87479,  87480,  87481,  87536,  87767,
        87928,  90817,  91438,  91612,  91613,  91672,  91732,  91961,
        93688,  95516,  95731,  95732,  95790,  95793,  95850,  95851,
        96030,  99678,  99679,  99841,  99842,  99891,  99897,  99950,
        99951,  99958, 103797, 103845, 103846, 103885, 103894, 103895,
       103896, 103945, 103946, 103996, 103997, 103998, 103999, 104055,
       104056, 104057, 104058, 104787, 105149, 107920, 107921, 107967,
       107968, 107969, 108006, 108014, 108015, 108016, 108017, 108062,
       108063, 108064, 108065, 108117, 108118, 108119, 108120, 108174,
       108175, 108176, 108177, 112060, 112111, 112112, 112113, 112160,
       112161, 112162, 112163, 112214, 112215, 112216, 112217, 112267,
       112268, 112269, 112270, 112271, 112272, 112324, 112325, 112326,
       112327, 112382, 116126, 116219, 116220, 116267, 116268, 116269,
       116270, 116315, 116316, 116317, 116318, 116367, 116368, 116369,
       116370, 116418, 116419, 116459, 120168, 120169, 120210, 120211,
       120212, 120249, 120250, 120251, 120286, 120287, 120288, 120289,
       120321, 124038, 124070, 124071, 124100, 137064, 137094, 137125,
       137186, 137444, 137485, 137489, 139764, 141628, 141665, 141667,
       141679, 141703, 141742, 141781, 141821, 141909, 141910, 142032,
       145744, 146650, 146926, 146973, 146982, 147036, 151526, 151633,
       151811, 152084, 152085, 152136, 155833, 161415, 165092, 165201,
       165391, 165428, 168087, 168120, 168150, 168221, 168237, 168256,
       168257, 168292, 168293, 168714, 168754, 168756, 168796, 168799,
       168841, 168842, 168843, 168917, 168965, 169328, 172599, 173012,
       173068, 173126, 177557, 177979, 182549, 182597, 182658, 182659,
       182799, 182973, 183536, 183667, 187916, 192985, 193514, 197670,
       197705, 198154, 198935, 205561, 207108, 209637, 213343, 213373,
       216881, 216921, 216922, 216923, 216963, 216964, 216965, 217002,
       217003, 217004, 217005, 220593, 220594, 220595, 220639, 220640,
       220641, 220642, 220689, 220690, 220691, 220692, 220739, 220741,
       220742, 220743, 220788, 220789, 220831, 224401, 224402, 224403,
       224448, 224449, 224450, 224451, 224452, 224498, 224499, 224500,
       224501, 224502, 224554, 224555, 224556, 224612, 228264, 228265,
       228311, 228312, 228313, 228360, 228361, 228409, 228410, 228463,
       228465, 228466, 228526, 229945, 230309, 232102, 232153, 232154,
       232208, 232318, 233435, 235986, 235987, 236037, 236038, 236039,
       236089, 236090, 236091, 236144, 236145, 236146, 239557, 239930,
       239977, 239978, 240028, 240029, 240030, 240082, 240083, 240084,
       240085, 240086, 240139, 240140, 240169, 240170, 240201, 240202,
       240228, 240260, 240261, 240262, 240288, 240319, 240321, 240379,
       240713, 240767, 244047, 244104, 244165, 244225, 244252, 244310,
       244398, 244757, 244805, 244855, 244904, 244947, 244948, 244989,
       245076, 245077, 245588, 247954, 247984, 248448, 248500, 248918,
       248919, 248963, 248964, 248965, 249011, 249012, 249014, 249116,
       249163, 249355, 252266, 252908, 252909, 252957, 252958, 252959,
       253008, 253009, 253010, 253011, 253012, 253155, 253159, 253201,
       253276, 253277, 256837, 256941, 256942, 256943, 256998, 257047,
       257048, 257050, 257052, 257103, 257150, 257161, 257199, 257209,
       257242, 260552, 260742, 260913, 261018, 261023, 261067, 261075,
       261136, 261205, 261250, 264174, 264935, 264997, 265054, 265055,
       265115, 265154, 265226, 265240, 265284, 265295, 265351, 265352,
       269099, 269100, 269170, 269171, 269220, 269221, 269225, 269282,
       269326, 269510, 269511, 269580, 269639, 269640, 269691, 272378,
       273036, 273037, 273086, 273087, 273088, 273399, 273400, 273461,
       273462, 273463, 273529, 273749, 273804, 273805, 273806, 273860,
       273865, 273866, 273925, 273926, 273935, 276788, 277489, 277504,
       277748, 277806, 278026, 278029, 278143, 278196, 278201, 278202,
       278261, 278269, 281254, 281585, 281730, 281803, 281862, 281978,
       282094, 282613, 285212, 285514, 285515, 285516, 286213, 286646,
       286648, 289288, 289356, 289653, 289709, 289980, 290625, 294040,
       294584, 294585, 294635, 294636, 294637, 294640, 297578, 301338,
       301394, 301395, 302199, 303247, 303393, 304560, 305300, 305586,
       305627, 305686, 306783, 308602, 308739, 308837, 308838, 308880,
       308881, 308981, 309148, 309188, 309202, 311440, 311943, 312286,
       312287, 312334, 312335, 312336, 312376, 312536, 312588, 312589,
       312638, 312639, 312838, 313474, 314566, 315187, 315241, 315242,
       315524, 315525, 315580, 315581, 315582, 315629, 315630, 315631,
       315825, 316419, 316458, 316459, 316465, 317713, 318200, 318201,
       318252, 318529, 318530, 318531, 318584, 318585, 318637, 318638,
       318639, 318685, 318841, 318842, 319287, 320564, 320867, 320996,
       321048, 321312, 321363, 321364, 321463, 321640, 321900, 322905,
       323094, 323095, 323478, 323571, 323622, 323866, 324507, 325216,
       326481, 328260, 329453, 329899, 330104, 330941, 330996, 331087,
       331605]

class ROIsFeatureExtractor(BaseEstimator, TransformerMixin):
    """Select only the 284 ROIs features:"""
 
    def fit(self, X, y):
        return self
 
    def transform(self, X):
        return X[:, :284]
    
class VBMFeatureExtractor(BaseEstimator, TransformerMixin):
    """Select 331695 VBM features:"""
    def fit(self, X, y):
        return self
 
    def transform(self, X):
        return X[:, np.array(features_idx_HD)]
 
ensemble_clf_soft = VotingClassifier(
    estimators=[
        ('lr1', SVC(class_weight="balanced", kernel='linear', probability=True, \
                       gamma=0.016994636371262764, C=0.15246748254295628, random_state=42)),
        ('lr2', NuSVC(probability=True, kernel='precomputed',\
                       gamma=0.25710111426089055, nu=0.5, random_state=42)),
        ('lr3', SVC(class_weight="balanced", kernel='rbf', probability=True, C=0.3, random_state=1, gamma='scale'))
    ],
    voting='soft'
)

# def get_estimator():
#     """Build your estimator here."""
#     estimator = make_pipeline(
#         VBMFeatureExtractor(),
#         RobustScaler(), 
#         ensemble_clf_soft
        
#     )
#     return estimator

def get_estimator():
    """Build your estimator here."""
    estimator = make_pipeline(
        VBMFeatureExtractor(),
        RobustScaler(), 
        ensemble_clf_soft
        
    )
    return estimator